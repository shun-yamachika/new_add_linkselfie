* 量子ネットワークスケジューリング評価：実験設定
すべての実験は以下の共通条件を基盤とする。個別の変更点は各章で明示する。

- ノイズモデル：Depolar, Dephase, AmplitudeDamping, BitFlip  
- バウンス構成： (1,2,3,4)  
- スケジューラ：LNaive, Groups, Greedy, WNaive  
- 乱数生成：numpy.random.Generator（PCG系列）seed=13  
- 正解率（Accuracy）：各宛先ペアdにおいてスケジューラが最良リンクを正しく特定できた場合を1とし、平均化  
- 価値（Value）： Value = sum_d ( I_d * true_fid(j*_d) ) ここで j*_d
  は「推定忠実度が最大のリンク」、true_fid はそのリンクの真の忠実度。
  その宛先 d に属する全パス（1..L）のうち、いずれのパスにも推定忠実度
  （est_fid_by_path）が存在しない場合、つまり宛先 d に対して1回も測定
  が行われていない場合は、その d の寄与（I_d * true_fid(j*_d)）を 0 と
  する。
- パスIDはすべて1-origin（1..L）  
- 出力は outputs/ ディレクトリに保存される（PDFおよびpickleキャッシュ）

---

** 1) 予算 vs 正解率（plot_accuracy_vs_budget）
目的：総バウンス予算C_totalに対する平均正解率を測定する。  
- 宛先ペア数：4  
- 各ペアの候補パス数：L=15  
- 重要度：固定 [0.2, 0.4, 0.6, 0.8]  
- 予算リスト：C_total ∈ {500, 1000, 1500, 2000, 2500, 3000}  
- 忠実度生成：repeatごとに1回生成し、同一トポロジを全C_total・全スケジューラで使用。  
  各ペアについて、L本のリンクを以下で生成：  
  1本目（最良候補）：N(alpha, sigma^2) からサンプリング  
  残りL−1本：N(beta, sigma^2) からサンプリング  
  alpha, betaは内部既定（例：alpha ≈ 0.95, beta ≈ 0.85）、sigmaは関数既定値。  
  各値は[0.8,1.0]に収まるまで再サンプリング。  
- repeat数：5  
- 出力：outputs/plot_accuracy_vs_budget_<NOISE>.pdf

---

** 2) 使用コスト vs 価値（plot_value_vs_used）
目的：実際に消費した総測定コストと得られた価値の関係を測定する。  
- 設定は(1)と同一（トポロジ再利用）。  
- 価値計算： Value = sum_d ( I_d * true_fid(j*_d) )  
  j*_dは推定忠実度が最大のリンクのパスID。  
  未推定ペアの寄与は0。  
- 横軸：平均実使用コスト（total_cost）  
- 縦軸：平均Value ± 95%CI  
- 出力：outputs/plot_value_vs_used_<NOISE>.pdf

---

** 3) 予算 vs 価値（plot_value_vs_budget）
目的：予算C_totalの増加に対する価値（Value）の変化を評価する。  
- 設定は(1)と同一。  
- X軸：C_total  
- Y軸：平均Value ± 95%CI  
- 出力：outputs/plot_value_vs_budget_<NOISE>.pdf

---

** 4) ギャップ（ランダム） vs 正解率（plot_accuracy_vs_gap）
目的：忠実度ギャップgを変化させたときの平均正解率を評価。  
- 宛先ペア数：5  
- 各ペアのパス数：L=4  
- 総予算：C_total=3000  
- 重要度：固定 [0.1, 0.3, 0.5, 0.7, 0.9]  
- ギャップリスト：g ∈ {0.05, 0.10, 0.15, 0.20}  
- 忠実度生成（gap×repeatごとに1回）：  
  各ペアdで4本の忠実度[f_d1..f_d4]を生成。  
  上位1本：N(alpha, sigma^2)から1サンプル。  
  残り3本：N(beta, sigma^2)からサンプル。  
  alpha = alpha_base = 0.95  
  beta = alpha - g  
  sigma = 0.025（標準偏差）  
  すべて[0.8,1.0]にクリップ。  
  生成関数：utils.fidelity._generate_fidelity_list_random_rng(rng, L, alpha, beta, variance)。  
- repeat数：5  
- 出力：outputs/plot_accuracy_vs_gap_random_<NOISE>.pdf

---

** 5) ギャップ（固定列） vs 正解率（plot_accuracy_vs_gap_fixgap）
目的：固定等差系列で与えた忠実度差に対する正解率を評価。  
- 宛先ペア数：5  
- パス数：L=4  
- 総予算：C_total=3000  
- ギャップリスト：g ∈ {0.01, 0.05, 0.10, 0.15, 0.20}  
- 忠実度生成：  
  各ペアdで [1.0, 1.0-g, 1.0-2g, 1.0-3g] の等差列を用いる。  
  生成関数：utils.fidelity.generate_fidelity_list_fix_gap(L, g, fidelity_max=1.0)。  
- repeat数：5  
- 出力：outputs/plot_accuracy_vs_gap_fixed_<NOISE>.pdf

---

** 6) ギャップ（ランダム） vs 価値（plot_value_vs_gap）
目的：ランダムギャップ条件下での平均価値を評価。  
- 設定は(4)と同一。  
- 価値計算：Value = sum_d ( I_d * true_fid(j*_d) )  
- 出力：outputs/plot_value_vs_gap_random_<NOISE>.pdf

---

** 7) ギャップ（固定列） vs 価値（plot_value_vs_gap_fixgap）
目的：固定等差系列ギャップ条件下での平均価値を評価。  
- 設定は(5)と同一。  
- 出力：outputs/plot_value_vs_gap_fixed_<NOISE>.pdf

---

** 8) 宛先ペア数 vs 正解率（plot_accuracy_vs_pairs）
目的：総予算固定で宛先ペア数Nを変化させたときの正解率を評価。  
- 総予算：C_total=3000  
- パス数：L=5  
- N ∈ {3, 5, 7, 9, 11, 13}  
- 忠実度生成（N×repeatごとに1回）：  
  各ペアdについて5本の忠実度を生成。  
  1本目：N(alpha, sigma^2)から1サンプル（alpha=0.90）  
  残り4本：N(beta, sigma^2)（beta=0.85）  
  sigma=0.1  
  各値は[0.8,1.0]に収まるまで再サンプリング。  
  1位と2位の差が0.02を超えるまで再生成。  
- repeat数：5  
- 出力：outputs/plot_accuracy_vs_pairs_<NOISE>.pdf

---

** 9) 宛先ペア数 vs 価値（plot_value_vs_pairs）
目的：総予算固定で宛先ペア数Nを変化させたときの平均価値を評価。  
- 設定は(8)と同一。  
- 価値計算：Value = sum_d ( I_d * true_fid(j*_d) )  
- 出力：outputs/plot_value_vs_pairs_<NOISE>.pdf

---

** トポロジ生成・共有規則
- 予算掃引（1–3）：repeatごとに1つのトポロジを生成し、同一repeat内の全C_total・全スケジューラで共通使用。  
- ギャップ掃引（4–7）：(gap, repeat)ごとに1つ生成し、同条件で全スケジューラ共通使用。  
- ペア数掃引（8–9）：(N, repeat)ごとに1つ生成し、同条件で全スケジューラ共通使用。  
- 忠実度マップ注入：各スケジューラ出力の推定辞書(est_fid_by_path)を1-origin化し、同一ID体系で真値辞書(true_fid_by_path)を注入。  
- キャッシュ：outputs/*.pickle に保存し、再実行時にロードして同一結果を再現する。

** スケジューラ手法定義
*** LNaive
LNaiveでは、測定予算を全ての宛先ペアに均等に割り当て、その範囲で各ペア内の全経路を一様に評価する。まず総予算 $C_{\text{total}}$ をペア数で等分し、各ペアへの割当予算 $C_{\text{pair}}$ を決定する。

次に各ペアについて、Network Benchmarking (NB) により $C_{\text{pair}}$ を当該ペアの全経路に均等配分する。各経路には同数の測定セットが割り当てられ、そのセット数 $N_s$ は $C_{\text{pair}}$ を1セット当たりのコスト（バウンス列の総和）で割った値（切り捨て）となる。各経路を $N_s$ セットずつ測定し、それぞれ成功確率 $p$ を観測して忠実度 $f = p + (1-p)/2$ を推定する。全経路の測定後、それぞれの推定忠実度を比較し、最大の忠実度を示した経路をそのペアの最良パスとして選択する。本手法では各経路への測定配分は固定であり、途中で経路の淘汰や配分変更を行わない。なお、割当予算が不足し各経路を1セットも測定できない場合、そのペアでは測定を行わない。

*** WNaive
WNaiveは、予算の各ペアへの割り当てにおいて重要度情報を用いる点でLNaiveと異なる。総予算 $C_{\text{total}}$ を各ペアの重み（重要度）に比例して配分し、高い重要度を持つペアには多くの測定資源を割り当てる（重要度が全てゼロの場合は均等割り当てにフォールバックする）。具体的には、各ペア $n$ の割当額 $C_{\text{pair},n}$ を $C_{\text{total}} * \frac{I_n}{\sum_m I_m}$ で算出し、小数点以下を切り捨てた後、予算超過がないよう端数を小数部分の大きい順に配分する。こうして決定した各ペアの予算内での測定手順はLNaiveと同様である。すなわち、各ペア内でのNBにおいて割当予算をそのペアの全経路に均等に分割し、各経路を同一回数だけ測定して忠実度を推定する。そして推定忠実度が最も高い経路を最良パスと判断する。重要度による偏重配分以外はLNaiveと同じ戦略のため、途中での適応的な測定制御や停止基準は設けていない。なお、極端に低い重要度で割当予算が各経路の1セット分にも満たないペアでは、測定が行われない。

*** Groups
Groups手法では、各ペアへの総予算配分はLNaiveと同様に均等であるが、ペア内での測定対象を重要度に応じてグループ化する特徴がある。各ペアについて、その重要度 $I_n$ の値に基づき経路群（グループ）を構成する。グループ分けの規則は以下の通りである。

$0.75 < I_n \le 1.00$: 経路をまとめず個別に扱う（各経路が独立のグループ）

$0.50 < I_n \le 0.75$: 経路を2本ずつのグループに分割

$0.25 < I_n \le 0.50$: 経路を3本ずつのグループに分割

$0 \le I_n \le 0.25$: 全経路を1つのグループにまとめる

グループ分け後、各グループにペア予算を均等に割り当てて測定を行う。グループ数を $n_g$ とすると、各グループの割当予算は $C_{\text{pair}}/n_g$（切り捨て）であり、それに基づき各グループあたりの測定セット数 $N_s$ を決定する（$N_s = \left\lfloor \frac{C_{\text{pair}}}{n_g \cdot c_B} \right\rfloor$, ただし $c_B$ は1セット当たりのコスト）。もし $N_s \ge 1$ であれば、各グループについて次の手順で測定する: $N_s$ 回の測定を繰り返し、その都度グループ内からランダムに1つの経路を選んで1セット分の測定を実施する。得られた忠実度値の平均 $\bar{f}$ をそのグループの推定忠実度とし、グループ内の全経路に対して同一の推定値として割り当てる。全グループの測定が終了した後、各経路の推定忠実度の中で最大のものを最良パスとして選択する。なお、予算不足で $N_s = 0$ の場合（各グループを1セットも測定できない場合）は、そのペアでは測定による評価が行われない。

*** Greedy
Greedy手法（Two-Phase Greedy）は、初期探索フェーズと集中的探索フェーズの二段階で予算を配分する戦略である。

フェーズ1（広域探索）: 各ペアに対して初期ラウンド (s=1) の NB 測定を順に行い、全体を広く探索する。残り予算がそのペアの全候補経路に対して一律に $N_s$ セット (ラウンド $s=1$ における測定回数) を投入するためのコストに満たない場合、そのペアの測定はスキップされる。実行可能な場合は、そのペア内の全経路を $N_s$ セットずつ測定して忠実度を推定する。ラウンド終了時には、観測された成功確率 $p$ の値に基づき閾値 $2^{-1}$ を用いて候補経路の絞り込み（逐次除去）を行う。具体的には、$p + 2^{-1} > p_{\max} - 2^{-1}$ を満たす経路を次ラウンドの候補として残し、それ以外の経路を除外する。この初期ラウンドで得られた各ペアの推定忠実度最大の経路およびその忠実度を記録する。

フェーズ2（集中的活用）: 初期ラウンドの結果を基に各ペアの優先度を算出し、残り予算を貪欲に配分する。各ペア $n$ について重要度 $I_n$ と初期推定忠実度 $f_n^{(init)}$ の積 $V_n = I_n * f_n^{(init)}$ をスコアとし、その値が高い順にペアを並べ替える。残余の予算をこの順序に従って各ペアに順次集中的に投入し、それぞれのペアで最良パスの特定に向けた追加測定を行う。具体的には、並べ替え後の各ペアについて、候補経路が複数残っている限り追加の NB ラウンド (s=2,3,...) を繰り返す。各ラウンドでは、前ラウンドから残っている候補すべてに対して一律に $N_s$ セットずつ測定を追加で行い（ラウンド番号 $s$ に応じて $N_s$ を増加させる）、その後で閾値 $2^{-s}$ による候補削減を適用する。測定は、当該ペアの候補経路が1本に絞られるか、次ラウンド分の予算が不足する（insufficient）か、あるいは全体の予算を使い切るまで継続される。あるペアの集中的測定が終了した後は、次のペアに残り予算を用いて同様の手順を繰り返す。最終的に、各ペアで得られた忠実度推定値を比較し、最も高い値を示した経路をそのペアの最良パスとする。
